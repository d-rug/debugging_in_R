[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Debugging in R",
    "section": "",
    "text": "Overview\nThis mini-workshop will cover the primary tools R provides to identify and fix problems in your code. It will also discuss when to use each and give you some hands on practice.\nWorkshop site: http://d-rug.github.io/debugging_in_R",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Debugging in R</span>"
    ]
  },
  {
    "objectID": "01_intro.html",
    "href": "01_intro.html",
    "title": "Introduction",
    "section": "",
    "text": "What is a bug?\nSometimes it’s a real bug:\nBut most of the time it is computer code that did not produce the output you anticipated.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "01_intro.html#debugging-tasks",
    "href": "01_intro.html#debugging-tasks",
    "title": "Introduction",
    "section": "Debugging Tasks",
    "text": "Debugging Tasks\n\nIdentify the bug\nLocate the bug\nInvestigate the bug\nReproduce the bug\nFix the bug\nPrevent prevent bug\n\nNot all of these steps will be relevant every time, but some of them will always be relevant, and sometimes you will need all of them.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "02_tasks.html",
    "href": "02_tasks.html",
    "title": "Tasks",
    "section": "",
    "text": "1. Identify The Bug\nKnowing you have a bug is the first step.\nIf you have an error message, this step is taken care of for you:\nx = c(1, 39, 2982, '5', 22)\n\nsqrt(x)\n\nError in sqrt(x): non-numeric argument to mathematical function\nHowever, many times there will be no error messages, you just have to figure out that something isn’t right.\nrange(x)\n\n[1] \"1\" \"5\"",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tasks</span>"
    ]
  },
  {
    "objectID": "02_tasks.html#strategies",
    "href": "02_tasks.html#strategies",
    "title": "Tasks",
    "section": "Strategies",
    "text": "Strategies\nDevelop expectations about what your data should look like and check them frequently, not just at the end of your process. Use investigative functions to check your expectations.\n\nInvestigative functions\n\nprint()\nhead()\nstr()\nView()\ndim()\nrange()\ntable()\nclass()\nis.na()\n\n\n\nUnit Tests\nUnit tests are outside the scope of this workshop but you can find more information via the testthat package.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tasks</span>"
    ]
  },
  {
    "objectID": "02_tasks.html#common-problems",
    "href": "02_tasks.html#common-problems",
    "title": "Tasks",
    "section": "Common Problems",
    "text": "Common Problems\n\nTypos/syntax errors\nObject is not the class that you think it is\nColumn is not the type that you think it is\nFile is not in the place that you think it is\nColumns missing from data\nMissing values (NAs) in the data\nReused variable names\nMutually exclusive filtering criteria",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tasks</span>"
    ]
  },
  {
    "objectID": "02_tasks.html#debugging-inside-functions",
    "href": "02_tasks.html#debugging-inside-functions",
    "title": "Tasks",
    "section": "Debugging Inside Functions",
    "text": "Debugging Inside Functions\nIf the bug is happening inside of a function, you have several options to troubleshoot. If you wrote the function, you can add the function call browser() inside your function. browser() opens an interactive debugging environment when called, allowing you to investigate what objects exist in the local environment of your function. It also means you can run the lines of the code inside your function interactively. If you did not write the offending function, you can use debug() to insert browser() as the first line of code of the function in question. Use undebug() to remove the\nbrowser() function call when you are done.\nFor bugs where the problem is nested somewhere deep in a function that you may or may not have access to, you can use the function recover() to enter a debugging session deep in the function call rabbit hole. By setting\n\noptions(error=recover)\n\nyou will trigger recover() to run any time you hit an error. This will then allow you to select the evaluation environment level at which to run a debugging session (see below).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tasks</span>"
    ]
  },
  {
    "objectID": "02_tasks.html#non-interactive-debugging",
    "href": "02_tasks.html#non-interactive-debugging",
    "title": "Tasks",
    "section": "Non-interactive Debugging",
    "text": "Non-interactive Debugging\nWhen running knitting/rendering notebooks, Rmarkdown and quarto notebooks provide the line numbers of the entire code chunk where the error occurred instead of the exact line number of the error. If you are struggling to identify where in a notebook an error occurs and running code in the console does not trigger the error, break your longer code chunks up into shorter ones. This will narrow down the number of lines of code you need to investigate.\nIf you don’t have any ability work with R interactively, like in the case of a remote computing cluster, you can use the function dump.frames() to create an R object called last.dump that contains information about the evaluation environment in question. In lieu of creating an R object, you can write that information to a file as well. You can even set options=dump.frames if you want environment information every time you hit an error.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Tasks</span>"
    ]
  },
  {
    "objectID": "03_example.html",
    "href": "03_example.html",
    "title": "An Example",
    "section": "",
    "text": "Example Buggy Code\nThe Github repository associated with this webpage contains example buggy code for you to practice on and fixed code you can use to check yourself.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>An Example</span>"
    ]
  },
  {
    "objectID": "03_example.html#a-reprex-of-date-issue",
    "href": "03_example.html#a-reprex-of-date-issue",
    "title": "An Example",
    "section": "A Reprex of Date Issue",
    "text": "A Reprex of Date Issue\nAt one point in the debugging process, you may find that if you use the ifelse() function to deal with the date problem, your dates have been converted to integers. If you weren’t able to find any answers to your problem via a search engine or StackOverflow, you could post your issue to one of a variety of forums or mailing lists using a “reprex” or reproducible example. A reprex is code that anyone can run regardless of whether they have access to your data or not. It should also demonstrate the problem you are having. A reprex for the date issue might look like this:\n\ndate_strings = c('2025-01-01', '1/2/2025')\n\nclass(date_strings)\n\n[1] \"character\"\n\ndates = ifelse(grepl('\\\\/', date_strings),\n               as.Date(date_strings, format='%m/%d/%Y'),\n               as.Date(date_strings, format='%Y-%m-%d'))\n\nprint(dates)\n\n[1] 20089 20090\n\nclass(dates)\n\n[1] \"numeric\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>An Example</span>"
    ]
  }
]